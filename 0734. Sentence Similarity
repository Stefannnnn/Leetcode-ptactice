// medium level: 737
class Solution {
public:
    bool areSentencesSimilar(vector<string>& words1, vector<string>& words2, vector<vector<string>>& pairs) {
        // The trick part is: the pair might have duplicated words point to the same word
        int len1 = words1.size();
        int len2 = words2.size();
        
        if (len1 != len2) {
            return false;
        }
        
        int pairLen = pairs.size();
        unordered_map<string,vector<string>> Map;
        
        for (int i = 0; i < pairLen; i++) {
            Map[pairs[i][0]].push_back(pairs[i][1]);
            Map[pairs[i][1]].push_back(pairs[i][0]);
        }
        
        
        for (int i = 0; i < len1; i++) {
            if (words1[i] != words2[i]) {
                vector<string> temp = Map[words1[i]];
                int llen = temp.size();
                bool flag = false;
                for (int j = 0; j < llen; j++) {
                    if (temp[j] == words2[i]) {
                        flag = true;
                        break;
                    }
                }
                if (flag == false) {
                    return false;
                }
            }
        }
        
        return true;
    }
};
