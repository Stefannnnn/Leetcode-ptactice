class Solution {
public:
    void solve(vector<vector<char> >& board) {
        //start from the boundary(4 sides), if there is any 'O', change it into '1', and track into all connected 'O', 
        //change it all. after that, start from the [0][0], if there is any 'O', change it into 'X'; if there is any '1', change 
        //it into 'O'
        int lenW = board.size();
        if (lenW == 0) {
            return;
        }
        int lenL = board[0].size();
        //check top and bottom
        for (int i = 0; i < lenL; i++) {
            DFS(board,0,i);
            DFS(board,lenW-1,i);
        }
        //check left and right
        for (int i = 0; i < lenW; i++) {
            DFS(board,i,0);
            DFS(board,i,lenL-1);
        }
        
        for (int i = 0; i < lenW; i++) {
            for (int j = 0; j < lenL; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if (board[i][j] == '1') {
                    board[i][j] = 'O';
                }
            }
        }
        return;
        
    }
    
    void DFS (vector<vector<char> >& board, int x, int y) {
        if (board[x][y] == 'O') {
            board[x][y] = '1';
            if (x - 1 >= 0) {
                DFS(board,x-1,y);
            }
            if (x + 1 < board.size()) {
                DFS(board,x+1,y);
            }
            if (y - 1 >= 0) {
                DFS(board,x,y-1);
            }
            if (y + 1 < board[0].size()) {
                DFS(board,x,y+1);
            }
        }
    }
   
};
