class Solution {
public:
    void solve(vector<vector<char> >& board) {
        //start from the boundary(4 sides), if there is any 'O', change it into '1', and track into all connected 'O', 
        //change it all. after that, start from the [0][0], if there is any 'O', change it into 'X'; if there is any '1', change 
        //it into 'O'
        if(board.size() == 0) return;
        
        int row = board.size();
        int column = board[0].size();
        if(row <=2 || column <= 2) return;
        
        //check the boundary
        //left side
        for(int i=0;i<row;i++){
            if(board[i][0] == 'O') search(board,i,0,row,column);
        }
        
        //right side
        for(int i=0;i<row;i++){
            if(board[i][column-1] == 'O') search(board,i,column-1,row,column);
        }
        
        //top side
        for(int i=0;i<column;i++){
            if(board[0][i] == 'O') search(board,0,i,row,column);
        }
        
        //down side
        for(int i=0;i<column;i++){
            if(board[row-1][i] == 'O') search(board,row-1,i,row,column);
        }
        
        //start to traverse the whole matrix
        for(int i=0;i<row;i++){
            for(int j=0;j<column;j++){
                if(board[i][j] == 'O'){
                    board[i][j] = 'X';
                }else if(board[i][j] == '1'){
                    board[i][j] = 'O';
                }
            }
        }
        
        
        return;
    }
    
    void search(vector<vector<char> >& board, int i, int j, int row, int column){
        //change it to '1'
        board[i][j] = '1';
        
        //move top
        if(i-1 >= 0 && board[i-1][j] == 'O') search(board,i-1,j,row,column);
        //move down
        if(i+1 < row && board[i+1][j] == 'O') search(board,i+1,j,row,column);
        //move left
        if(j-1 >=0 && board[i][j-1] == 'O') search(board,i,j-1,row,column);
        //move right
        if(j+1 < column && board[i][j+1] == 'O') search(board,i,j+1,row,column);
        
        return;
    }
};
