class Solution {
public:
    int numMatchingSubseq(string S, vector<string>& words) {
        int sLen = S.length();
        unordered_map<char,vector<int>> Map;
        for (int i = 0; i < sLen; i++) {
            Map[S[i]].push_back(i);
        }
        
        int count = 0;
        int numWords = words.size();
        for (string word:words) {
            int curIndex = -1;
            vector<int>::iterator iter;
            int wordLen = word.length();
            bool flag = true;
            for (char c:word) {
                iter = upper_bound(Map[c].begin(), Map[c].end(), curIndex);
                if (iter == Map[c].end()) {
                    flag = false;
                    break;
                }
                curIndex = *iter;
            }
            if (flag) {
                count++;
            }
        }
        
        return count;
    }
};
