class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        int len = nums.size();
        vector<int> ans;
        if (len == 0) {
            return ans;
        }
        
        unordered_map<int,int> Map;
        unordered_map<int,int>::iterator iter;
        for (int& n: nums) {
            iter = Map.find(n);
            if (iter == Map.end()) {
                Map[n] = 1;
            } else { 
                Map[n]++;
            }
        }
        
        
        priority_queue<pair<int,int>> Q;
        for (iter = Map.begin(); iter != Map.end(); iter++) {
            Q.push({iter->second,iter->first});
        }
        
        for (int i = 0; i < k; i++) {
            ans.push_back(Q.top().second);
            Q.pop();
            if (Q.empty()) {
                break;
            }
        }
        return ans;
    }
};
