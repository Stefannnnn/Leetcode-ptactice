/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;

    Node() {}

    Node(int _val, Node* _next, Node* _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
class Solution {
public:
    Node* copyRandomList(Node* head) {
        /* 
        1.When you create a Node, you have to set up all property, even though they are NULL, still neet to set up 
        */
        if (!head) {
            return NULL;
        }
        
        //First, create new node and link it between the original list
        Node* curNode = head;
        while (curNode) {
            Node* tempNode = new Node(curNode->val,NULL,NULL);
            tempNode->next = curNode->next;
            curNode->next = tempNode;
            curNode = tempNode->next;
        }
        
        //Second, set up the random pointer
        curNode = head;
        while (curNode) {
            if (curNode->random) {
                curNode->next->random = curNode->random->next;
            } else {
                curNode->next->random = NULL;
            }
            
            curNode = curNode->next->next;
        }
        
        //Third, link the next pointer (for both original list and new list)
        curNode = head;
        Node* root = curNode->next;
        Node* newListNode = root;
        while (curNode) {
            curNode->next = curNode->next->next;
            curNode = curNode->next;
            if (newListNode->next) {
                newListNode->next = newListNode->next->next;
                newListNode = newListNode->next;
            } else {
                break;
            }
        }
        
        return root;
    }
};
