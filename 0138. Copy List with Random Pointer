/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;

    Node() {}

    Node(int _val, Node* _next, Node* _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
class Solution {
public:
    Node* copyRandomList(Node* head) {
        /* 
        1.When you create a Node, you have to set up all property, even though they are NULL, still neet to set up 
        */
        
        if (!head) {
            return NULL;
        }
        
        Node* newNode;
        Node* oldNode = head;
        //First, create new node and link it between the original list
        while (oldNode) {
            Node* tempNode = new Node(oldNode->val,NULL,NULL);
            tempNode->next = oldNode->next;
            oldNode->next = tempNode;
            oldNode = tempNode->next;
        }
        
        //Second, set up the random pointer
        oldNode = head;
        while (oldNode) {
            //the random pointer could be null
            if (oldNode->random) {
                oldNode->next->random = oldNode->random->next;
            } else {
                oldNode->next->random = NULL;
            }
            
            oldNode = oldNode->next->next;
        }
        
        
        //Third, link the next pointer (for both original list and new list)
        Node* ansNode = head->next;
        oldNode = head;
        while (oldNode) {
            newNode = oldNode->next;
            oldNode->next = newNode->next;
            if (!newNode->next) {
                oldNode->next = NULL;
                newNode->next = NULL;
                break;
            }
            newNode->next = oldNode->next->next;
            oldNode = oldNode->next;
            
        }
        
        return ansNode;
    }
};
