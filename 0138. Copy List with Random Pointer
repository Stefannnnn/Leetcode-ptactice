/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;

    Node() {}

    Node(int _val, Node* _next, Node* _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(!head){
            return head;
        }
        
        Node* cur_node = head;
        Node* temp_node = head;
        //set the val and next pointer to new node
        while(cur_node) {
            temp_node = cur_node->next;
            cur_node->next = new Node(cur_node->val);
            cur_node->next->next = temp_node;
            cur_node = temp_node;
        }
        //set the random pointers
        cur_node = head;
        while(cur_node) {
            if(!cur_node->random) {
                cur_node->next->random = NULL;
            }
            else {
                cur_node->next->random = cur_node->random->next;
            }
            
            cur_node = cur_node->next->next;
        }
        //link the new nodes
        cur_node = head;
        Node* ans_node = head->next;
        while(cur_node){
            temp_node = cur_node->next;
            cur_node->next = temp_node->next;
            if(!temp_node->next) {
                cur_node->next = NULL;
                temp_node->next = NULL;
                break;
            }
            else {
                temp_node->next = cur_node->next->next;
            }
            cur_node = cur_node->next;
            temp_node = temp_node->next;
        }
        return ans_node;
    }
};
