/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* prev;
    Node* next;
    Node* child;
};
*/
class Solution {
private:
    stack<Node*> Stack;
    
    Node* helper (Node* curNode) {
        Node* tempNode = NULL;
        while (curNode) {
            if (curNode->child) {
                if (curNode->next) {
                    Stack.push(curNode->next);
                }
                curNode->next = curNode->child;
                curNode->child->prev = curNode;
                curNode->child = NULL;
            }
            tempNode = curNode;
            curNode = curNode->next;
        }
        return tempNode;
    }
    
public:
    Node* flatten(Node* head) {
        if (!head) {
            return head;
        }
        Node* curNode = head;
        Node* tempNode = NULL;
        curNode = helper(curNode);
        
        // Deal with stack
        while (!Stack.empty()) {
            tempNode = Stack.top();
            Stack.pop();
            curNode->next = tempNode;
            tempNode->prev = curNode;
            curNode = helper(curNode);
        }
        
        return head;
    }
};
