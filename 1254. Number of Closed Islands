class Solution {
public:
    int closedIsland(vector<vector<int>>& grid) {
        // Strategy: 1. Go throgh 4 sides, change all '0' and the connect '0's to -1
        //           2. Go to the inner matrix, find a '0', count++, and change all connect '0's to -1
        int h = grid.size();
        if (h == 0) {
            return -1;
        } else if (h == 1) {
            return 0;
        }
        int w = grid[0].size();
        
        // Go throgh 4 sides, change all '0' and the connect '0's to -1
        for (int i = 0; i < h; i++) {
            if (grid[i][0] == 0) {
                DFS(grid,i,0,h,w);
            }
            if (grid[i][w-1] == 0) {
                DFS(grid,i,w-1,h,w);
            }
        }
        for (int j = 0; j < w; j++) {
            if (grid[0][j] == 0) {
                DFS(grid,0,j,h,w);
            }
            if (grid[h-1][j] == 0) {
                DFS(grid,h-1,j,h,w);
            }
        }
        
        // Go to the inner matrix, find a '0', count++, and change all connect '0's to -1
        int count = 0;
        for (int i = 1; i < h-1; i++) {
            for (int j = 1; j < w-1; j++) {
                if (grid[i][j] == 0) {
                    DFS(grid,i,j,h,w);
                    count++;
                }
            }
        }
        
        return count;
    }
    
    void DFS (vector<vector<int>>& grid,int x, int y, int h, int w) {
        grid[x][y] = -1;
        if (x-1 >= 0 && grid[x-1][y] == 0) {
            DFS(grid,x-1,y,h,w);
        } 
        if (x+1 < h && grid[x+1][y] == 0) {
            DFS(grid,x+1,y,h,w);
        }
        if (y-1 >= 0 && grid[x][y-1] == 0) {
            DFS(grid,x,y-1,h,w);
        }
        if (y+1 < w && grid[x][y+1] == 0) {
            DFS(grid,x,y+1,h,w);
        }
        
        return;
    }
    
};
