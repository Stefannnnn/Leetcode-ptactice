class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {
        int h = matrix.size();
        if (h <= 0) {
            return vector<vector<int>>();
        }
        int w = matrix[0].size();
        // [[0]]
        if (h == 1 && w == 1) {
            if (matrix[0][0] == 0) {
                return matrix;
            }
        }
        
        queue<pair<int,int>> Q;
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                if (matrix[i][j] == 0) {
                    Q.push({i,j});
                } else {
                    matrix[i][j] = INT_MAX;
                }
            }
        }
        
        int dir[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};
        while (!Q.empty()) {
            pair<int,int> temp = Q.front();
            Q.pop();
            
            for (int i = 0; i < 4; i++) {
                int x = temp.first + dir[i][0];
                int y = temp.second + dir[i][1];
                if (x >= 0 && x < h && y >= 0 && y < w) {
                    if (matrix[x][y] <= matrix[temp.first][temp.second] + 1) {
                        continue;
                    }    
                    matrix[x][y] = matrix[temp.first][temp.second] + 1;
                    Q.push({x,y});
                }
                
            }
        }
        
        
        return matrix;
    }
    
    
    
};
