class Solution {
public:
    int maxCoins(vector<int>& nums) {
        int N = nums.size();
        nums.insert(nums.begin(),1);
        nums.insert(nums.end(),1);
        
        int length = nums.size();
        // dp[i][j] means the max value we can get in range (i,j)
        vector<vector<int>> dp(length,vector<int>(length,0));
        
        // We start from len
        for (int len = 1; len <= N; len++) {
            for (int start = 1; start <= N-len+1; start++) {
                int end = start + len - 1;
                
                // Find the max value between start and end
                int best = 0;
                for (int k = start; k <= end; k++) {
                    int coin = dp[start][k-1] + dp[k+1][end];
                    coin += nums[start-1] * nums[k] * nums[end+1];
                    if (coin > best) {
                        best = coin;
                    }
                }
                dp[start][end] = best;
            }
        }
        
        return dp[1][N];
        
    }
};
