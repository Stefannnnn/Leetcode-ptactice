#include<string>
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        /*
            First of all, you check from 0 to i(this substring), is it shows in the wordDict? if yes, mark it in the dp array.
            if yes, from i to len(those substrings), if there is any substing in wordDict, mark 1 in the dp array
        */
        int sLen = s.length();
        
        unordered_set<string> Set;
        for(int i = 0; i < wordDict.size(); i++){
            Set.insert(wordDict[i]);
        }
        
        int dp[sLen + 1] = {0}; //this dp array record until dp[i], there is a combination that substr(0,i) can be segmented into words that show in dictionary
        dp[0] = 1;
        
        for(int i = 1;i <= sLen; i++) {
            if(dp[i] == 0 && Set.count(s.substr(0,i)) != 0) {
                dp[i] = 1;
            }
            
            if(dp[i] == 1) {
                if(i == sLen){
                    return true;
                }
                
                for(int j = i + 1; j <= sLen; j++) {
                    if(dp[j] == 0 && Set.count(s.substr(i,j - i)) != 0) {
                        dp[j] = 1;
                        
                        if(j == sLen) {
                            return true;
                        }
                    }
                }
            }                
        }
        return false;
    }
};
