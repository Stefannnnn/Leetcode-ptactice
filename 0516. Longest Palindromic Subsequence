class Solution {
public:
    int longestPalindromeSubseq(string s) {
        // dp[i][j] = max(dp[i+1][j], dp[i][j-1])                o o i
        // i_____________________j                               o
        //j = height, i = width                                  j       the answer is in left-bottom
        int len = s.length();
        int dp[len][len];
        memset(dp,0,sizeof(dp));
        for (int i = 0; i < len; i++) {
            for (int j = i; j <= i; j++) {
                if(i == j) {
                    dp[i][j] = 1; 
                }
            }
        }
        
        //only need left-top part
        for (int j = 1; j < len; j++) {
            for (int i = j-1; i >= 0; i--) { //from right to left
                if (s[i] == s[j]) {
                    dp[j][i] = dp[j-1][i+1] + 2;
                }else {
                    dp[j][i] = max(dp[j-1][i], dp[j][i+1]);
                }
            }
        }
        
        return dp[len-1][0];
    }
};
