// Method 1: find all point in island 1 and island 2, calculate the distance between them, find the shortest one(althogh
some of the distance will not have a path between them, it is ok since it will not contain the shortest path) Time: O(a*b) 
a:number of points in island 1. b: number of points in island 2


class Solution {
public:
    int shortestBridge(vector<vector<int>>& A) {
        int h = A.size();
        int w = A[0].size();
        
        vector<pair<int,int>> firstIsland;
        vector<pair<int,int>> secondIsland;
        int flag = 1;
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                if (A[i][j] == 1 && flag == 1) {
                    flag++;
                    DFS(A,i,j,h,w,-1,firstIsland);
                } else if (A[i][j] == 1 && flag == 2) {
                    DFS(A,i,j,h,w,-1,secondIsland);
                } 
            }
        }
        
        int ans = INT_MAX;
        int numI1 = firstIsland.size();
        int numI2 = secondIsland.size();
        for (int i = 0; i < numI1; i++) {
            for (int j = 0; j < numI2; j++) {
                int temp = abs(firstIsland[i].first - secondIsland[j].first) + abs(firstIsland[i].second - secondIsland[j].second) - 1;
                ans = min(ans,temp);
            }
        }
        
        return ans;
    }
    
    void DFS (vector<vector<int>>& A, int i, int j, int h, int w, int value, vector<pair<int,int>> &Island) {
        if (i >= 0 && i < w && j >= 0 && j < w && A[i][j] == 1) {
            Island.push_back({i,j});
            A[i][j] = value;
            DFS(A,i-1,j,h,w,value,Island);
            DFS(A,i+1,j,h,w,value,Island);
            DFS(A,i,j-1,h,w,value,Island);
            DFS(A,i,j+1,h,w,value,Island);
        }
    }
    
};





// Method 2: Use DFS to find two islands; use BFS to find the distance -> slow: O(m*m*n*n)
class Solution {
public:
    int shortestBridge(vector<vector<int>>& A) {
        int w = A.size();
        int h = A[0].size();
        
        // First step, find the first '1', usc DFS to change all '1' connected with it to '-1'.
        int count = 1;
        for (int i = 0; i < w; i++) {
            for (int j = 0; j < h; j++) {
                if (A[i][j] == 0) {
                    A[i][j] = INT_MAX;
                } else if (A[i][j] == 1 && count == 1) {
                    DFS_change1(A,i,j,w,h);
                    count++;
                } else if (A[i][j] == 1 && count == 2) {
                    DFS_change2(A,i,j,w,h);
                }
            }
        }
        
        
        
        // Second Step, find the second group of '1', usc BFS to find the cloest '-1'(let all '1' in second group do BFS)
        int ans = INT_MAX;
        for (int i = 0; i < w; i++) {
            for (int j = 0; j < h; j++) {
                if (A[i][j] == -1) {
                    queue<pair<int,pair<int,int>>> Q;   // (step, x, y)
                    Q.push({0,{i+1,j}});
                    Q.push({0,{i-1,j}});
                    Q.push({0,{i,j+1}});
                    Q.push({0,{i,j-1}});
                    while (!Q.empty()) {
                        int round = Q.size();
                        for (int i = 0; i < round; i++) {
                            int step = Q.front().first;
                            // if (step >= ans) {
                            //     break;
                            // }
                            int x = Q.front().second.first;
                            int y = Q.front().second.second;
                            Q.pop();
                            if (x >= 0 && x < w && y >= 0 && y < h) {
                                if (A[x][y] != -1) {
                                    if (A[x][y] == -2) {
                                        ans = min(ans,step);
                                    } else if (A[x][y] > step) {
                                        A[x][y] = step;
                                        Q.push({step+1,{x+1,y}});
                                        Q.push({step+1,{x-1,y}});
                                        Q.push({step+1,{x,y+1}});
                                        Q.push({step+1,{x,y-1}});
                                    }
                                    
                                }
                            }
                        }
                    }
                }
            }
        }
        
        return ans;
    }
    
    void DFS_change1 (vector<vector<int>>& A, int x, int y, int w, int h) {
        if (x < 0 || y < 0 || x >= w || y >= h || A[x][y] != 1) {
            return;
        }
        
        A[x][y] = -1;
        DFS_change1(A,x-1,y,w,h);
        DFS_change1(A,x+1,y,w,h);
        DFS_change1(A,x,y+1,w,h);
        DFS_change1(A,x,y-1,w,h);
        return;
    }
    
    void DFS_change2 (vector<vector<int>>& A, int x, int y, int w, int h) {
        if (x < 0 || y < 0 || x >= w || y >= h || A[x][y] != 1) {
            return;
        }
        
        A[x][y] = -2;
        DFS_change2(A,x-1,y,w,h);
        DFS_change2(A,x+1,y,w,h);
        DFS_change2(A,x,y+1,w,h);
        DFS_change2(A,x,y-1,w,h);
        return;
    }
    
};
