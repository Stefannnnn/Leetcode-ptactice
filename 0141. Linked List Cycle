/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        // To slow this kind of problem, just use two pointers, one go two steps, one go one step. If there is a cycle, the fast one will meet the slow one
        if (!head) {
            return false;
        } else if (!head->next) {
            return false;
        }
        ListNode *fast = head->next;
        ListNode *slow = head;
        
        while (fast != NULL && slow != NULL) {
            if (fast == slow) {
                return true;
            }
            
            slow = slow->next;
            fast = fast->next;
            if (!fast) {
                return false;
            }
            fast = fast->next;
        }    
            
        return false;
    }
};
