/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSubtree(TreeNode* s, TreeNode* t) {
        if(!s) {
            return false;
        }
        
        return check(s,t) || isSubtree(s->left, t) || isSubtree(s->right, t);
    }
    
    bool check(TreeNode* s, TreeNode* t){
        if(!s && !t) {
            return true;
        }
        
        if((!s && t) || (s && !t)) {
            return false;
        }
        
        if(s->val != t->val) {
            return false;
        }
        
        return check(s->left, t->left) && check(s->right, t->right);
        
    }
};




// Method 2: do preorder first and find substr, wrost case  = O(n)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSubtree(TreeNode* s, TreeNode* t) {
        string T = "";
        preorder(T, t);
        string S = "";
        preorder(S, s);
       
        
        int indicate = S.find(T);
        if (indicate == string:: npos) {
            return false;
        } 
        else {
            return true;
        }
    }
    
    void preorder(string &S, TreeNode* s) {
        if (!s) {
            S.push_back('#');
        }
        else {
            S.append(',' + to_string(s->val));
            preorder(S, s->left);
            preorder(S, s->right);
        }
    }
    
    
};
