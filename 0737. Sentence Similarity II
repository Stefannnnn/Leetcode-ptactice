class Solution {
public:
    bool areSentencesSimilarTwo(vector<string>& words1, vector<string>& words2, vector<vector<string>>& pairs) {
        int len1 = words1.size();
        int len2 = words2.size();
        if (len1 != len2) {
            return false;
        }
        
        int pairLen = pairs.size();
        unordered_map<string,vector<string>> Map;
        for (int i = 0; i < pairLen; i++) {
            Map[pairs[i][0]].push_back(pairs[i][1]);
            Map[pairs[i][1]].push_back(pairs[i][0]);
        }
        
        for (int i = 0; i < len1; i++) {
            if (words1[i] != words2[i]) {
                bool flag = true;
                queue<vector<string>> Q;
                Q.push(Map[words1[i]]);
                unordered_set<string> Set;
                Set.insert(words1[i]);
                while (!Q.empty()) {
                    vector<string> temp = Q.front();
                    Q.pop();
                    int llen = temp.size();
                    for (int j = 0; j < llen; j++) {
                        if (temp[j] == words2[i]) {
                            flag = false;
                            break;
                        }
                        if (Set.count(temp[j]) == 0) {
                            Set.insert(temp[j]);
                            Q.push(Map[temp[j]]);
                        }
                        
                    }
                }
                
                if (flag) {
                    return false;
                }
            }
        }
        
        return true;
    }
};
