class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        int len = nums.size();
        vector<int> temp(len,0);
        mergeSort(0,len-1,nums,temp);
        return nums;
    }
    
private:
    void mergeSort (int start, int end, vector<int>& nums, vector<int>& temp) {
        if (start >= end) {
            return;
        }
        int mid = start + (end - start)/2;
        mergeSort(start,mid,nums,temp);
        mergeSort(mid+1,end,nums,temp);
        merge(nums,start,mid,end,temp);
    }
    
    void merge (vector<int>& nums, int start, int mid, int end, vector<int>& temp) {
        int l = start;
        int r = mid+1;
        int index = start;
        while (index <= end) {
            if (l == mid+1) {
                temp[index++] = nums[r++];
            } else if (r == end+1) {
                temp[index++] = nums[l++];
            } else if (nums[l] < nums[r]) {
                temp[index++] = nums[l++];
            } else {
                temp[index++] = nums[r++];
            }
        }
        
        for (int i = start; i <= end; i++) {
            nums[i] = temp[i];
        }
    }
};
