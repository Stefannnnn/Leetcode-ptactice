// Method 1:
class Solution {
public:
    vector<int> assignBikes(vector<vector<int>>& workers, vector<vector<int>>& bikes) {
        int lenW = workers.size();
        int lenB = bikes.size();
        // since the max distance is 2000
        vector<vector<pair<int,int>>> info(2001);    //for eash distance -> vector<pair<worker id, bike id>>
        for (int i = 0; i < lenW; i++) {
            for (int j = 0; j < lenB; j++) {
                //distance
                int distance = abs(workers[i][0] - bikes[j][0]) + abs(workers[i][1] - bikes[j][1]);
                //store in info
                info[distance].push_back(make_pair(i,j));
            }
        }
        
        vector<int> ans(lenW,-1); 
        vector<bool> bikeVisited(lenB,false);
        
        for (int d = 0; d < 2001; d++) {
            for (int j = 0; j < info[d].size(); j++) {
                if (bikeVisited[info[d][j].second] == false && ans[info[d][j].first] == -1) {
                    bikeVisited[info[d][j].second] = true;
                    ans[info[d][j].first] = info[d][j].second;
                }
            }
        }
        
        return ans;
    }
};



//Method 2:
// Can't use map<int,map<int,int>> -> the key is unique! will override...
class Solution {
public:
    vector<int> assignBikes(vector<vector<int>>& workers, vector<vector<int>>& bikes) {
        // distance : worker_id : bike_id
        
        int numWorkers = workers.size();
        int numBikes = bikes.size();
        if (numWorkers == 0){
            return vector<int>();
        }
        
        map<long,vector<pair<int,int>>> Map;
        for (int i = 0; i < numWorkers; i++) {
            for (int j = 0; j < numBikes; j++) {
                int x = abs(workers[i][0] - bikes[j][0]);
                int y = abs(workers[i][1] - bikes[j][1]);
                long dis = x + y;
                //cout << "dis:" << dis << ", i:" << i << ", j:" << j << endl;
                Map[dis].push_back({i,j});
            }
        }
        
        vector<int> ans(numWorkers,-1);
        unordered_set<int> Set;
        for (map<long,vector<pair<int,int>>>::iterator iter = Map.begin(); iter != Map.end(); iter++) {
            for (int i = 0; i < iter->second.size(); i++) {
                if (ans[iter->second[i].first] == -1) {
                    if (Set.count(iter->second[i].second) == 0) {
                        ans[iter->second[i].first] = iter->second[i].second;
                        Set.insert(iter->second[i].second);
                    }
                }
            }
        }
        
        return ans;
    }
};
