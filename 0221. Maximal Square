class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int lenW = matrix.size();
        if (lenW == 0) {
            return 0;
        }
        int lenL = matrix[0].size();
        int ans = 0;
        vector<vector<int>> dp(lenW, vector<int>(lenL,0));
        for (int i = 0; i < lenL; i++) {
            if (matrix[0][i] == '0') {
                dp[0][i] = 0;
            } else {
                dp[0][i] = 1;
                ans = 1;
            }
        }
        for (int i = 0; i < lenW; i++) {
            if (matrix[i][0] == '0') {
                dp[i][0] = 0;
            } else {
                dp[i][0] = 1;
                ans = 1;
            }
        }
        
        for (int i = 1; i < lenW; i++) {
            for (int j = 1; j < lenL; j++) {
                if (matrix[i][j] == '1') {
                    if (matrix[i-1][j-1] == '1' && matrix[i][j-1] == '1' && matrix[i-1][j] == '1') {
                        dp[i][j] = min(dp[i-1][j],min(dp[i][j-1],dp[i-1][j-1])) + 1;
                        cout <<  dp[i][j] << endl;
                    } else {
                        dp[i][j] = 1;
                    }
                    ans = max(ans,dp[i][j]);
                }
            }
        }
        return ans* ans;
    }
};
