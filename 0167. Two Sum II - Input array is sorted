class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> ans;
        unordered_map<int,int> Map;
        unordered_map<int,int>::iterator iter;
        for (int i = 0; i < numbers.size(); i++) {
            iter = Map.find(numbers[i]);
            if (iter != Map.end()) {    //find it
                ans.push_back(iter->second + 1);
                ans.push_back(i+1);
                return ans;
            } else {    //not find it
                Map[target - numbers[i]] = i;
            }
        }
        
        
        // int right = numbers.size() - 1;
        // int left = 0;
        // while (right > left) {
        //     int sum = numbers[right] + numbers[left];
        //     if (sum == target) {
        //         ans.push_back(left + 1);
        //         ans.push_back(right + 1);
        //         return ans;
        //     } else if (sum < target) {
        //         left++;
        //     } else if (sum > target) {
        //         right--;
        //     }
        // }
        
        
        
        return ans;
    }
};

