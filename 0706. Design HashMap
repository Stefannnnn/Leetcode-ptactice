// Method 1: faster: 86%
// use % 10000 to push all element into 10000 buckets. and search

class MyHashMap {
private:
    vector<list<pair<int,int>>> hash;
    list<pair<int,int>>::iterator iter;
    int msize = 10000;
    
public:
    
    /** Initialize your data structure here. */
    MyHashMap() {
        hash.resize(10000);
    }
    
    /** value will always be non-negative. */
    void put(int key, int value) {
        // Find if already exits
        list<pair<int,int>> &tempList = hash[key % msize];
        bool flag = true;
        for (pair<int,int> &element : tempList) {
            if (element.first == key) {
                element.second = value;
                flag = false;
                break;
            }
        }
        if (flag) {
            hash[key % msize].push_back({key,value});
        }
        
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    int get(int key) {
        list<pair<int,int>> &tempList = hash[key % msize];
        for (pair<int,int> &element : tempList) {
            if (element.first == key) {
                return element.second;
            }
        }
        
        return -1;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    void remove(int key) {
        list<pair<int,int>> &tempList = hash[key % msize];
        int first = -1;
        int second = -1;
        for (iter = tempList.begin(); iter != tempList.end(); iter++) {
            if (iter->first == key) {
                first = iter->first;
                second = iter->second;
                break;
            }
            
        }
        hash[key % msize].remove({first,second});
    }
};

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap* obj = new MyHashMap();
 * obj->put(key,value);
 * int param_2 = obj->get(key);
 * obj->remove(key);
 */
 
 
 




// Method 2: use vector, slow: 30%
class MyHashMap {
public:
    //vector<list<pair<int,int>>> hash;
    vector<int> hash;
    int msize = 10000;
    /** Initialize your data structure here. */
    MyHashMap() {
        hash.resize(1000001,-1);
    }
    
    /** value will always be non-negative. */
    void put(int key, int value) {
        hash[key] = value;
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    int get(int key) {
        return hash[key];
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    void remove(int key) {
        hash[key] = -1;
    }
};

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap* obj = new MyHashMap();
 * obj->put(key,value);
 * int param_2 = obj->get(key);
 * obj->remove(key);
 */
